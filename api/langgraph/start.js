import { Client } from '@langchain/langgraph-sdk';
import crypto from 'crypto';

/**
 * Universal body parser that works in both Vite and Vercel environments
 */
async function getRequestBody(req) {
  // Check if body is already parsed (Vercel often does this)
  if (req.body) {
    return typeof req.body === 'string' ? JSON.parse(req.body) : req.body;
  }
  
  // Check if request is already aborted
  if (req.aborted || req.destroyed) {
    throw new Error('Request aborted');
  }
  
  // Otherwise, parse it manually
  return new Promise((resolve, reject) => {
    let body = '';
    
    // Handle connection close
    req.on('close', () => {
      if (!req.complete) {
        reject(new Error('Request aborted'));
      }
    });
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', () => {
      try {
        resolve(JSON.parse(body));
      } catch (e) {
        reject(new Error('Invalid JSON body'));
      }
    });
    
    req.on('error', (err) => {
      reject(err);
    });
  });
}

export default async function handler(req, res) {
  console.log('[API Start] Handler called, method:', req.method);
  
  if (req.method !== 'POST') {
    res.setHeader('Content-Type', 'application/json');
    res.statusCode = 405;
    res.end(JSON.stringify({ error: 'Method not allowed' }));
    return;
  }

  // Parse body using universal parser
  let parsedBody;
  try {
    parsedBody = await getRequestBody(req);
  } catch (e) {
    console.error('[API Start] Failed to parse body:', e);
    
    // Check if response was already sent or connection closed
    if (!res.headersSent && !res.destroyed) {
      res.setHeader('Content-Type', 'application/json');
      res.statusCode = 400;
      res.end(JSON.stringify({ error: e.message }));
    }
    return;
  }
  
  const { prompt, accountData, userId, documentId: providedDocumentId } = parsedBody;
  console.log('[API Start] Parsed request:', { 
    prompt, 
    accountData, 
    userId, 
    documentId: providedDocumentId,
    hasAccountData: !!accountData,
    accountId: accountData?.id
  });

  try {
    console.log('[API Start] Environment vars:', {
      apiUrl: process.env.LANGGRAPH_API_URL,
      hasApiKey: !!process.env.LANGGRAPH_API_KEY
    });
    
    // Initialize LangGraph client
    const client = new Client({
      apiUrl: process.env.LANGGRAPH_API_URL,
      apiKey: process.env.LANGGRAPH_API_KEY
    });
    
    const thread = await client.threads.create();
    
    // Use provided document ID or generate a new one
    const documentId = providedDocumentId || crypto.randomUUID();
    
    // Validate accountData
    if (!accountData || !accountData.id) {
      console.error('[API Start] Invalid accountData:', accountData);
      res.setHeader('Content-Type', 'application/json');
      res.statusCode = 400;
      res.end(JSON.stringify({ 
        success: false,
        error: 'Account data is required for document generation'
      }));
      return;
    }
    
    const run = await client.runs.create(thread.thread_id, 'document_generator', {
      input: { 
        task: prompt, 
        account_data: accountData,
        user_id: userId,  // Pass user context for document ownership
        document_id: documentId,
        thread_id: thread.thread_id  // Include for tracking
        // run_id will be generated by the agent if needed
      },
      multitaskStrategy: 'enqueue'
    });
    
    // Return the IDs for realtime subscription
    res.setHeader('Content-Type', 'application/json');
    res.statusCode = 200;
    res.end(JSON.stringify({
      success: true,
      threadId: thread.thread_id,
      runId: run.run_id,
      documentId: documentId
    }));
    
  } catch (error) {
    console.error('[API Start] Error:', error);
    
    // Check if response was already sent or connection closed
    if (!res.headersSent && !res.destroyed) {
      res.setHeader('Content-Type', 'application/json');
      res.statusCode = 500;
      res.end(JSON.stringify({ 
        success: false,
        error: error.message,
        details: error.response?.data || error.statusText || 'Unknown error'
      }));
    }
  }
}

export const config = {
  maxDuration: 300, // 5 minutes - enough time for agent to complete
};